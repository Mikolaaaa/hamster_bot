import logging
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram import F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.state import State
from aiogram.fsm.state import StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from db import init_db, get_user, add_user, update_coins, SessionLocal, User
import random
from sqlalchemy.future import select
import os
from aiogram.types import FSInputFile


API_TOKEN = '7381987351:AAGFo5oor7_tUMdZwHvjT8ltT4BvyIHvbqc'

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
async def on_startup():
    await init_db()  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π
class Form(StatesGroup):
    main_menu = State()
    shop = State()
    stats = State()
    coinflip_side = State()
    coinflip_bet = State()
    guess_number_choice = State()  # –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ —á–∏—Å–ª–∞
    guess_number_bet = State()     # –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—Ç–∞–≤–∫–∏ –≤ –∏–≥—Ä–µ —Å —á–∏—Å–ª–∞–º–∏
    click_hamster = State()


# –ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä—Ç
@dp.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    user_id = message.from_user.id

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º user_id –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(user_id=user_id)

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    state_data = await state.get_data()

    async with SessionLocal() as session:
        if not await get_user(session, user_id):
            await add_user(session, user_id)  # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î

    await show_main_menu(message.chat.id, state)

def get_random_hamster_image():
    hamster_folder = 'hamsters/'  # –ü–∞–ø–∫–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
    hamster_images = os.listdir(hamster_folder)  # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ
    print(hamster_images)
    random_image = random.choice(hamster_images)  # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    print(random_image)
    return os.path.join(hamster_folder, random_image)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é

@dp.callback_query(StateFilter(Form.main_menu), F.data == 'show_hamster')
async def process_show_hamster(callback_query: types.CallbackQuery, state: FSMContext):
    hamster_image_path = get_random_hamster_image()  # –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    print(f"hamster_image_path {hamster_image_path}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª
    if os.path.isfile(hamster_image_path):
        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç InputFile
        photo = FSInputFile(hamster_image_path)  # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –ø–æ–¥–ø–∏—Å—å—é
        await bot.send_photo(
            chat_id=callback_query.from_user.id,
            photo=photo,
            caption="–í–æ—Ç –≤–∞—à —Ö–æ–º—è—á–æ–∫! üêπ",
            disable_notification=True  # –û—Ç–∫–ª—é—á–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        )
    else:
        await bot.send_message(callback_query.from_user.id, "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await show_main_menu(callback_query.from_user.id, state)


# –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
async def show_main_menu(chat_id: int, state: FSMContext):
    state_data = await state.get_data()
    user_id = state_data['user_id']

    async with SessionLocal() as session:
        user = await get_user(session, user_id)  # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ user_id

        button1 = types.InlineKeyboardButton(text="üí∞ –ù–∞–∂–º–∏ –Ω–∞ —Ö–æ–º—è—á–∫–∞", callback_data='click_hamster')
        button2 = types.InlineKeyboardButton(text="üèÜ –ú–∞–≥–∞–∑–∏–Ω", callback_data='shop')
        button3 = types.InlineKeyboardButton(text="üéÆ –ò–≥—Ä—ã", callback_data='game_menu')
        button4 = types.InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –º–æ–Ω–µ—Ç–∞–º", callback_data='stats')
        button5 = types.InlineKeyboardButton(text="üêπ –ü–æ–∫–∞–∑–∞—Ç—å —Ö–æ–º—è–∫–∞", callback_data='show_hamster')
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–∞—à ID
        if user_id == 1131742460:
            admin_button = types.InlineKeyboardButton(text="üîß –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data='admin_panel')
            keyboard = types.InlineKeyboardMarkup(
                inline_keyboard=[[button1], [button2], [button3], [button4], [button5], [admin_button]])
        else:
            keyboard = types.InlineKeyboardMarkup(
                inline_keyboard=[[button1], [button2], [button3], [button4], [button5]])

        await bot.send_message(chat_id,
                               f'üí∞ –ë–∞–ª–∞–Ω—Å: {user.coins} –º–æ–Ω–µ—Ç.\n'
                               f'üêπ –£—Ä–æ–≤–µ–Ω—å —Ö–æ–º—è–∫–∞: {user.hamster_level}\n'
                               f'üîù –ú–Ω–æ–∂–∏—Ç–µ–ª—å: {user.multiplier_level}\n'
                               f'‚è≥ –ü–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥: {user.passive_income} –º–æ–Ω–µ—Ç/—á–∞—Å\n',
                               reply_markup=keyboard
                               )

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.set_state(Form.main_menu)


@dp.callback_query(F.data == 'admin_panel')
async def admin_panel(callback_query: types.CallbackQuery, state: FSMContext):
    if callback_query.from_user.id != 1131742460:
        await callback_query.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
        return

    async with SessionLocal() as session:
        result = await session.execute(select(User))
        users = result.scalars().all()  # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        stats_message = "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n"

        for user in users:
            try:
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                chat_info = await bot.get_chat(user.id)
                username_link = f"@{chat_info.username}" if chat_info.username else "–ë–µ–∑ –Ω–∏–∫–∞"
                stats_message += f"ID: {user.id}, –ù–∏–∫: {username_link}, –ú–æ–Ω–µ—Ç—ã: {user.coins}\n"
            except Exception as e:
                stats_message += f"ID: {user.id}, –û—à–∏–±–∫–∞: {str(e)}\n"

        await bot.send_message(callback_query.from_user.id, stats_message)
        await show_main_menu(callback_query.from_user.id, state)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ò–≥—Ä–∞: –£–≥–∞–¥–∞–π —á–∏—Å–ª–æ"
@dp.callback_query(StateFilter(Form.main_menu), F.data == 'guess_number')
async def process_guess_number(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.send_message(callback_query.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 5.")

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ —á–∏—Å–ª–∞
    await state.set_state(Form.guess_number_choice)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —á–∏—Å–ª–∞
@dp.message(StateFilter(Form.guess_number_choice))
async def choose_number(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    chosen_number = message.text

    if not chosen_number.isdigit() or not (1 <= int(chosen_number) <= 5):
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 5.")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(chosen_number=int(chosen_number))

    await message.reply("–°–∫–æ–ª—å–∫–æ –º–æ–Ω–µ—Ç –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å—Ç–∞–≤–∏—Ç—å?")
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—É–º–º—ã
    await state.set_state(Form.guess_number_bet)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å—É–º–º—ã
@dp.message(StateFilter(Form.guess_number_bet))
async def choose_bet_for_guess(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    bet_amount = message.text

    if not bet_amount.isdigit():
        await message.reply("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –º–æ–Ω–µ—Ç –¥–ª—è —Å—Ç–∞–≤–∫–∏.")
        return

    bet_amount = int(bet_amount)

    async with SessionLocal() as session:
        user = await get_user(session, user_id)

        if bet_amount > user.coins:
            await message.reply("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç –¥–ª—è —ç—Ç–æ–π —Å—Ç–∞–≤–∫–∏.")
            return

        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        state_data = await state.get_data()
        chosen_number = state_data['chosen_number']

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 5
        random_number = random.randint(1, 5)

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —É–≥–∞–¥–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        if chosen_number == random_number:
            user.coins += bet_amount * 5  # –£–º–Ω–æ–∂–∞–µ–º —Å—Ç–∞–≤–∫—É –Ω–∞ 5
            await update_coins(session, user_id, user.coins)
            await message.reply(
                f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —É–≥–∞–¥–∞–ª–∏! –°–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ: {random_number}. –£ –≤–∞—Å —Ç–µ–ø–µ—Ä—å {user.coins} –º–æ–Ω–µ—Ç.")
        else:
            user.coins -= bet_amount
            await update_coins(session, user_id, user.coins)
            await message.reply(
                f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –Ω–µ —É–≥–∞–¥–∞–ª–∏. –°–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ: {random_number}. –£ –≤–∞—Å —Ç–µ–ø–µ—Ä—å {user.coins} –º–æ–Ω–µ—Ç.")

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await show_main_menu(user_id, state)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ò–≥—Ä–∞"
@dp.callback_query(StateFilter(Form.main_menu), F.data == 'coinflip')
async def process_coinflip(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.send_message(callback_query.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ—Ä–æ–Ω—É: '–æ—Ä–µ–ª' –∏–ª–∏ '—Ä–µ—à–∫–∞'.")

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—Ç–æ—Ä–æ–Ω—ã
    await state.set_state(Form.coinflip_side)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å—Ç–æ—Ä–æ–Ω—ã (–æ—Ä–µ–ª –∏–ª–∏ —Ä–µ—à–∫–∞)
@dp.message(StateFilter(Form.coinflip_side))
async def choose_side(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    chosen_side = message.text.lower()

    if chosen_side not in ['–æ—Ä–µ–ª', '—Ä–µ—à–∫–∞']:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ '–æ—Ä–µ–ª' –∏–ª–∏ '—Ä–µ—à–∫–∞'.")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —Å—Ç–æ—Ä–æ–Ω—É –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(chosen_side=chosen_side)

    await message.reply("–°–∫–æ–ª—å–∫–æ –º–æ–Ω–µ—Ç –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å—Ç–∞–≤–∏—Ç—å?")
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—É–º–º—ã
    await state.set_state(Form.coinflip_bet)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å—É–º–º—ã
@dp.message(StateFilter(Form.coinflip_bet))
async def choose_bet(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    bet_amount = message.text

    if not bet_amount.isdigit():
        await message.reply("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –º–æ–Ω–µ—Ç –¥–ª—è —Å—Ç–∞–≤–∫–∏.")
        return

    bet_amount = int(bet_amount)

    async with SessionLocal() as session:
        user = await get_user(session, user_id)

        if bet_amount > user.coins:
            await message.reply("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç –¥–ª—è —ç—Ç–æ–π —Å—Ç–∞–≤–∫–∏.")
            return

        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        state_data = await state.get_data()
        chosen_side = state_data['chosen_side']

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç (–æ—Ä–µ–ª –∏–ª–∏ —Ä–µ—à–∫–∞)
        result = random.choice(['–æ—Ä–µ–ª', '—Ä–µ—à–∫–∞'])

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –≤—ã–∏–≥—Ä–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        if chosen_side == result:
            user.coins += bet_amount  # –£–º–Ω–æ–∂–∞–µ–º –Ω–∞ 2
            await update_coins(session, user_id, user.coins)
            await message.reply(f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏! –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}. –£ –≤–∞—Å —Ç–µ–ø–µ—Ä—å {user.coins} –º–æ–Ω–µ—Ç.")
        else:
            user.coins -= bet_amount
            await update_coins(session, user_id, user.coins)
            await message.reply(f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏. –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}. –£ –≤–∞—Å —Ç–µ–ø–µ—Ä—å {user.coins} –º–æ–Ω–µ—Ç.")

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await show_main_menu(user_id, state)

@dp.callback_query(F.data == 'main_menu')
async def process_main_menu(callback_query: types.CallbackQuery, state: FSMContext):
    await show_main_menu(callback_query.from_user.id, state)


@dp.callback_query(StateFilter(Form.main_menu), F.data == 'click_hamster')
async def process_hamster_click(callback_query: types.CallbackQuery, state: FSMContext):
    # –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–¥—Å—á–µ—Ç –∫–ª–∏–∫–æ–≤
    await state.set_state(Form.click_hamster)
    await state.update_data(clicks=0)  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–ª–∏–∫–æ–≤

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
    button1 = types.KeyboardButton(text="–ö–ª–∏–∫")
    button2 = types.KeyboardButton(text="–°—Ç–æ–ø")
    keyboard = types.ReplyKeyboardMarkup(keyboard=[[button1], [button2]], resize_keyboard=True)

    await bot.send_message(
        chat_id=callback_query.from_user.id,
        text='–ù–∞—á–∏–Ω–∞–π—Ç–µ –Ω–∞–∂–∏–º–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É "–ö–ª–∏–∫".',
        reply_markup=keyboard  # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π "–ö–ª–∏–∫"
@dp.message(StateFilter(Form.click_hamster), F.text == '–ö–ª–∏–∫')
async def handle_click_message(message: types.Message, state: FSMContext):
    data = await state.get_data()
    clicks = data.get('clicks', 0) + 1  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∏–∫–æ–≤
    await state.update_data(clicks=clicks)  # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ

    await message.answer(f'–í—ã –Ω–∞–∂–∞–ª–∏ –Ω–∞ —Ö–æ–º—è—á–∫–∞! –í—Å–µ–≥–æ –∫–ª–∏–∫–æ–≤: {clicks}.')


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π "–°—Ç–æ–ø"
@dp.message(StateFilter(Form.click_hamster), F.text == '–°—Ç–æ–ø')
async def handle_stop_message(message: types.Message, state: FSMContext):
    data = await state.get_data()
    clicks = data.get('clicks', 0)

    async with SessionLocal() as session:
        user = await get_user(session, message.from_user.id)
        if not user:
            await add_user(session, message.from_user.id)
            user = await get_user(session, message.from_user.id)

        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç
        user.coins += clicks
        user.total_tap_income += clicks # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ –æ—Ç —Ç–∞–ø–æ–≤
        await update_coins(session, message.from_user.id, user.coins)

    await message.answer(f'–í—ã –æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ –∏–≥—Ä—É! –í—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏ {clicks} –º–æ–Ω–µ—Ç. –£ –≤–∞—Å —Å–µ–π—á–∞—Å {user.coins} –º–æ–Ω–µ—Ç.')

    # –£–¥–∞–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    await message.answer('–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.', reply_markup=types.ReplyKeyboardRemove())

    await state.set_state(Form.click_hamster)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await show_main_menu(message.from_user.id, state)


@dp.callback_query(StateFilter(Form.shop), F.data == 'buy_hamster_level')
async def process_buy_hamster_level(callback_query: types.CallbackQuery, state: FSMContext):
    user_id = callback_query.from_user.id
    async with SessionLocal() as session:
        user = await get_user(session, user_id)

        cost = (user.hamster_level + 1) ** 3

        if user.coins >= cost:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ –º–æ–Ω–µ—Ç
            user.coins -= cost
            user.hamster_level += 1  # –ü–æ–≤—ã—à–∞–µ–º —É—Ä–æ–≤–µ–Ω—å —Ö–æ–º—è–∫–∞
            await session.commit()
            await callback_query.answer("–í—ã –ø–æ–¥–Ω—è–ª–∏ —É—Ä–æ–≤–µ–Ω—å —Ö–æ–º—è–∫–∞!")
        else:
            await callback_query.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç!")

@dp.callback_query(StateFilter(Form.shop), F.data == 'buy_multiplier')
async def process_buy_multiplier(callback_query: types.CallbackQuery, state: FSMContext):
    user_id = callback_query.from_user.id

    async with SessionLocal() as session:
        user = await get_user(session, user_id)

        # –û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —É—Ä–æ–≤–Ω—è –º–Ω–æ–∂–∏—Ç–µ–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 10 –º–æ–Ω–µ—Ç –∑–∞ —É—Ä–æ–≤–µ–Ω—å)
        cost = (user.multiplier_level + 1) ** 3
        if user.coins >= cost:
            user.coins -= cost
            user.multiplier_level += 1  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –º–Ω–æ–∂–∏—Ç–µ–ª—è
            await session.commit()
            await callback_query.answer(f"–í—ã –∫—É–ø–∏–ª–∏ —É—Ä–æ–≤–µ–Ω—å –º–Ω–æ–∂–∏—Ç–µ–ª—è! –¢–µ–ø–µ—Ä—å —É –≤–∞—Å —É—Ä–æ–≤–µ–Ω—å: {user.multiplier_level}.")
        else:
            await callback_query.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç!")


async def give_passive_income():
    while True:
        async with SessionLocal() as session:
            users = await session.execute(select(User))
            for user in users.scalars().all():
                if user.passive_income > 0:
                    user.coins += user.passive_income  # –ù–∞—á–∏—Å–ª—è–µ–º –¥–æ—Ö–æ–¥ –ø–æ —É—Ä–æ–≤–Ω—é
                    user.total_passive_income += user.passive_income  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ –æ—Ç –ø–∞—Å—Å–∏–≤–Ω–æ–≥–æ –¥–æ—Ö–æ–¥–∞
                    await update_coins(session, user.id, user.coins)

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –∑–≤—É–∫–∞ –∏ –≤–∏–±—Ä–∞—Ü–∏–∏
                    await bot.send_message(
                        chat_id=user.id,
                        text=f"üéâ –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ {user.passive_income} –º–æ–Ω–µ—Ç –æ—Ç –ø–∞—Å—Å–∏–≤–Ω–æ–≥–æ –¥–æ—Ö–æ–¥–∞!",
                        disable_notification=True  # –û—Ç–∫–ª—é—á–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                    )
            await session.commit()
        await asyncio.sleep(3600)  # –ö–∞–∂–¥—ã–µ 60 –º–∏–Ω—É—Ç

@dp.callback_query(StateFilter(Form.shop), F.data == 'buy_passive_income')
async def process_buy_passive_income(callback_query: types.CallbackQuery, state: FSMContext):
    user_id = callback_query.from_user.id
    async with SessionLocal() as session:
        user = await get_user(session, user_id)

        # –õ–æ–≥–∏–∫–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É—Ä–æ–≤–Ω—è
        # cost = 100 * user.passive_income_level  # –°—Ç–æ–∏–º–æ—Å—Ç—å —Ä–∞—Å—Ç–µ—Ç —Å —É—Ä–æ–≤–Ω–µ–º
        income_increase = 10 * user.passive_income_level  # –£–≤–µ–ª–∏—á–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–∞ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —É—Ä–æ–≤–Ω—è
        cost = 10 * ((user.passive_income_level + 1) ** 2)
        if user.passive_income_level == 0:
            income_increase = 10
            cost = 10

        if user.coins >= cost:
            user.coins -= cost
            user.passive_income += 10  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –¥–æ—Ö–æ–¥
            user.passive_income_level += 1  # –ü–æ–≤—ã—à–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –ø–∞—Å—Å–∏–≤–Ω–æ–≥–æ –¥–æ—Ö–æ–¥–∞
            await session.commit()
            await callback_query.answer(f"–¢–µ–ø–µ—Ä—å —É –≤–∞—Å –ø–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥ {user.passive_income} –º–æ–Ω–µ—Ç/—á–∞—Å (—É—Ä–æ–≤–µ–Ω—å {user.passive_income_level}).")
        else:
            await callback_query.answer(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –ø–∞—Å—Å–∏–≤–Ω–æ–≥–æ –¥–æ—Ö–æ–¥–∞. –ù—É–∂–Ω–æ {cost} –º–æ–Ω–µ—Ç.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ò–≥—Ä–∞"
@dp.callback_query(StateFilter(Form.main_menu), F.data == 'game_menu')
async def process_game_menu(callback_query: types.CallbackQuery, state: FSMContext):
    button1 = types.InlineKeyboardButton(text="üé≤ –û—Ä–µ–ª/–†–µ—à–∫–∞", callback_data='coinflip')
    button2 = types.InlineKeyboardButton(text="üî¢ –£–≥–∞–¥–∞–π —á–∏—Å–ª–æ", callback_data='guess_number')
    button3 = types.InlineKeyboardButton(text="üõí –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[[button1], [button2], [button3]])

    await bot.edit_message_text(
        text="–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É:",
        chat_id=callback_query.from_user.id,
        message_id=callback_query.message.message_id,
        reply_markup=keyboard
    )

    await state.set_state(Form.main_menu)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ú–∞–≥–∞–∑–∏–Ω"
@dp.callback_query(StateFilter(Form.main_menu), F.data == 'shop')
async def process_shop(callback_query: types.CallbackQuery, state: FSMContext):
    user_id = callback_query.from_user.id

    state_data = await state.get_data()
    async with SessionLocal() as session:
        user = await get_user(session, user_id)

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –∏ —É—Ä–æ–≤–µ–Ω—å
        next_level_cost = 10 * ((user.passive_income_level + 1) ** 2)
        cost_buy_multiplier = (user.multiplier_level + 1) ** 3
        cost_hamster_level = (user.hamster_level + 1) ** 3

        button1 = types.InlineKeyboardButton(text=f"üèÖ –ö—É–ø–∏—Ç—å {user.multiplier_level + 1} —É—Ä–æ–≤–µ–Ω—å –º–Ω–æ–∂–∏—Ç–µ–ª—è –∑–∞ {cost_buy_multiplier} –º–æ–Ω–µ—Ç",
                                             callback_data='buy_multiplier')
        button2 = types.InlineKeyboardButton(text=f"ü•á –ö—É–ø–∏—Ç—å {user.hamster_level + 1} —É—Ä–æ–≤–µ–Ω—å —Ö–æ–º—è–∫–∞ –∑–∞ {cost_hamster_level} –º–æ–Ω–µ—Ç",
                                             callback_data='buy_hamster_level')
        button3 = types.InlineKeyboardButton(
            text=f"üí∏ –ö—É–ø–∏—Ç—å –ø–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥ {user.passive_income + 10} –º–æ–Ω–µ—Ç/—á–∞—Å –∑–∞ {next_level_cost} –º–æ–Ω–µ—Ç",
            callback_data='buy_passive_income')
        button4 = types.InlineKeyboardButton(text="üõí –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=[[button1], [button2], [button3], [button4]])


        await bot.edit_message_text(
            text=f'–£ –≤–∞—Å {user.coins} –º–æ–Ω–µ—Ç. –ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å?',
            chat_id=callback_query.from_user.id,
            message_id=callback_query.message.message_id,
            reply_markup=keyboard,
        )

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.set_state(Form.shop)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ö—É–ø–∏—Ç—å —É–ª—É—á—à–µ–Ω–∏–µ"
@dp.callback_query(StateFilter(Form.shop), F.data == 'buy_upgrade')
async def process_buy_upgrade(callback_query: types.CallbackQuery, state: FSMContext):
    user_id = callback_query.from_user.id

    state_data = await state.get_data()
    async with SessionLocal() as session:
        user = await get_user(session, user_id)

        if user.coins >= 5:
            user.coins -= 5  # –°–ø–∏—Å—ã–≤–∞–µ–º –º–æ–Ω–µ—Ç—ã
            await update_coins(session, user_id, user.coins)
            await bot.answer_callback_query(callback_query.id, text="–í—ã –∫—É–ø–∏–ª–∏ —É–ª—É—á—à–µ–Ω–∏–µ!")
        else:
            await bot.answer_callback_query(callback_query.id, text="–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç!")

        await show_main_menu(user_id, state)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
@dp.callback_query(StateFilter(Form.main_menu), F.data == 'stats')
async def process_stats(callback_query: types.CallbackQuery, state: FSMContext):
    user_id = callback_query.from_user.id

    state_data = await state.get_data()
    async with SessionLocal() as session:
        user = await get_user(session, user_id)

        stats_message = (
            f'**–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è**:\n\n'
            f'üí∞ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {user.coins}\n'
            f'üí∑ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ –≤—Å–µ–≥–æ: {user.total_tap_income + user.total_passive_income}\n'
            f'üí∏ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ –æ—Ç —Ç–∞–ø–æ–≤: {user.total_tap_income}\n'
            f'üìà –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ –æ—Ç –ø–∞—Å—Å–∏–≤–Ω–æ–≥–æ –¥–æ—Ö–æ–¥–∞: {user.total_passive_income}\n'
            f'üí∂ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: {user.total_tap_income + user.total_passive_income - user.coins}\n'
        )

        await bot.edit_message_text(
            text=stats_message,
            chat_id=callback_query.from_user.id,
            message_id=callback_query.message.message_id,
            parse_mode='Markdown'
        )
        await show_main_menu(callback_query.from_user.id, state)

if __name__ == '__main__':
    loop = asyncio.get_event_loop()
    # –ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ –¥–ª—è –ø–∞—Å—Å–∏–≤–Ω–æ–≥–æ –¥–æ—Ö–æ–¥–∞
    loop.create_task(give_passive_income())
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    loop.run_until_complete(dp.start_polling(bot, on_startup=on_startup))
